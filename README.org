* Declare

** upstream

- upstream :: purcell's GitHub repository.

*** Merge upstream steve purcell's GitHub updates

1) merge all updates

   1. =$ git fetch upstream master=
   2. =$ git merge upstream/master=

2) pick some updates(commits) to merge

   1. Cherry pick


1) [X] http://technosophos.com/2009/12/04/git-cherry-picking-move-small-code-patches-across-branches.html
2) [ ] http://gitready.com/intermediate/2009/03/04/pick-out-individual-commits.html
3) [ ] http://stackoverflow.com/questions/1241720/git-cherry-pick-vs-merge-workflow

* Help

** Emacs built-in help

** guide-key

* Emacs

** minibuffer

*** ido-mode

- =[C-./,]= -- next/previous item

**** ideomenu

** window

- =[C-x 2]= :: split window vertically
- =[C-x 3]= :: split window horizontally
- =[C-x |]= :: rearrange split windows (split window horizontally instead)
- =[C-x _]= :: rearrange split windows (split window vertically instead)

- =[C-c o]= :: switch window. (package: switch-window)

- =[C-x ^]= :: enlarge window size.
  - =[C-u 16 C-x ^]= :: with universal arguments to enlarge window size quickly
       and continuously.

** Dired

*** dired+

** editing utils

*** unfill

*** whole-line-or-region

*** electric-pair-mode

*** whitespace-cleanup-mode

*** global [RET]

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "RET") 'newline-and-indent)
#+END_SRC

*** subword-mode

*** undo-tree

*** highlight-symbol

*** don't disable narrowing commands

#+BEGIN_SRC emacs-lisp
;;----------------------------------------------------------------------------
;; Don't disable narrowing commands
;;----------------------------------------------------------------------------
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)
(put 'narrow-to-defun 'disabled nil)
#+END_SRC

*** show matching parens

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

*** expand-region

#+BEGIN_SRC emacs-lisp
(package-install 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

*** don't disable case change functions

#+BEGIN_SRC emacs-lisp
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
#+END_SRC

*** handy key bindings

#+BEGIN_SRC emacs-lisp
;; To be able to M-x without meta
(global-set-key (kbd "C-x C-m") 'execute-extended-command)

;; Vimmy alternatives to M-^ and C-u M-^
(global-set-key (kbd "C-c j") 'join-line)
(global-set-key (kbd "C-c J") (lambda () (interactive) (join-line 1)))

(global-set-key (kbd "C-.") 'set-mark-command)
(global-set-key (kbd "C-x C-.") 'pop-global-mark)

(package-install 'ace-jump-mode)
(global-set-key (kbd "C-;") 'ace-jump-mode)
(global-set-key (kbd "C-:") 'ace-jump-word-mode)


(package-install 'multiple-cursors)
;; multiple-cursors
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-+") 'mc/mark-next-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
;; From active region to multiple cursors:
(global-set-key (kbd "C-c c r") 'set-rectangular-region-anchor)
(global-set-key (kbd "C-c c c") 'mc/edit-lines)
(global-set-key (kbd "C-c c e") 'mc/edit-ends-of-lines)
(global-set-key (kbd "C-c c a") 'mc/edit-beginnings-of-lines)
#+END_SRC

*** page break lines

**** page-break-lines

*** fill column indicator

*** shift lines up/down

**** move-text

- =[M-S-up]= :: =move-text-up=
- =[M-S-down]= :: =move-text-down=

*** highlight-escape-sequences (hes-mode)

*** auto-capitalize mode

- auto capitalize words of an sentence.

- prevent a word in the =auto-capitalize-words= list from being capitalized or
  upcased in a particular context.  e.g. ("=GNU.emacs.sources="), insert the
  following *whitepsace* or *punctuation* character with: =[M-x quoted insert]=
  (e.g. =[gnu C-q .]=).

*** Iedit


*** rectangle

**** cua rectangle

#+BEGIN_SRC emacs-lisp
(cua-selection-mode t)
#+END_SRC

- =[C-return]= :: /toggle/ a rectangle.
- and extend it using the normal movement keys (up, down, left, etc).
- =[C-w]= :: cut
- =[C-w]= :: copy
- =[C-y]= :: subsequently insert it.

Normally, when you paste a rectangle using =[C-v]= (=[C-y]=), each line of the
rectangle is inserted into the existing lines in the buffer.  If overwrite-mode
is active when you paste a rectangle, it is inserted as normal (multi-line)
text.

If you type a normal (self-inserting) character when the rectangle is active,
the character is inserted on the "current side" of every line of the rectangle.
The "current side" is the side on which the cursor is currently located. If the
rectangle is only 1 column wide, insertion will be performed to the left when
the cursor is at the bottom of the rectangle.  So, for example, to comment out
an entire paragraph like this one, just place the cursor on the first character
of the first line, and enter the following:

=[C-return M-} ; ; <space> C-return]=

cua-mode's rectangle support also includes all the normal rectangle functions
with easy access:

- =[M-a]= :: aligns all words at the left edge of the rectangle
- =[M-b]= :: fills the rectangle with blanks (tabs and spaces)
- =[M-c]= :: closes the rectangle by removing all blanks at the left edge
  of the rectangle
- =[M-f]= :: fills the rectangle with a single character (prompt)
- =[M-i]= :: increases the first number found on each line of the rectangle
  by the amount given by the numeric prefix argument (default 1)
  It recognizes 0x... as hexadecimal numbers
- =[M-k]= :: kills the rectangle as normal multi-line text (for paste)
- =[M-l]= :: downcases the rectangle
- =[M-m]= :: copies the rectangle as normal multi-line text (for paste)
- =[M-n]= :: fills each line of the rectangle with increasing numbers using
  a supplied format string (prompt)
- =[M-o]= :: opens the rectangle by moving the highlighted text to the right of the
  rectangle and filling the rectangle with blanks.
- =[M-p]= :: toggles virtual straight rectangle edges
- =[M-P]= :: inserts tabs and spaces (padding) to make real straight edges
- =[M-q]= :: performs text filling on the rectangle
- =[M-r]= :: replaces REGEXP (prompt) by STRING (prompt) in rectangle
- =[M-R]= :: reverse the lines in the rectangle
- =[M-s]= :: fills each line of the rectangle with the same STRING (prompt)
- =[M-t]= :: performs text fill of the rectangle with TEXT (prompt)
- =[M-u]= :: upcases the rectangle
- =[M-|]= :: runs shell command on rectangle
- =[M-']= :: restricts rectangle to lines with CHAR (prompt) at left column
- =[M-/]= :: restricts rectangle to lines matching REGEXP (prompt)
- =[C-?]= :: Shows a brief list of the above commands.

=[M-C-up] and [M-C-down]= scrolls the lines INSIDE the rectangle up and down;
lines scrolled outside the top or bottom of the rectangle are lost, but can be
recovered using =[C-z]=.

**** rectangle-mark-mode

- =[C-h v rectangle-mark-mode-map]= :: check out all rectangle-mark-mode key bindings.
- =[C-x SPC]= :: =(rectangle-mark-mode)=,
- =[C-o]= :: =(open-rectangle)=, Blank out the region-rectangle, shifting text right.
- =[C-t]= :: =(string-rectangle)=, Replace rectangle contents with STRING on each line.

**** Iedit rectangle

*** multiple-cursors

- =[Enter]= / =[C-g]= :: quit multiple cursor.

To get out of multiple-cursors-mode, press =<return>= or =[C-g]=. The latter
will first disable multiple regions before disabling multiple cursors. If you
want to insert a newline in multiple-cursors-mode, use =[C-j]=.

- =[C-S-c C-S-c]= :: =('mc/edit-lines)=.
- =[C->]= :: =('mc/mark-next-like-this)=.
- =[C-<]= :: =('mc/mark-previous-like-this)=.
- =[C-c C-<]= :: =('mc/mark-all-like-this)=.
- =[C-c C->]= :: =('mc/mark-pop)=

** spelling

*** ispell

*** flyspell

** register

- =[C-x r (SPC/j)]= :: wait for a while after pressing this, the register pool will
                   popup upper minibuffer.

* package management

** package.el

*** install a package

- =[M-x package-install RET]= :: install a package.

*** list out packages

- =[M-x package-list-packages]= :: list out packages.
  - =[U]= :: mark upgrades.
  - =[x]= :: execute actions for marked packages.

*** upgrade packages

1. =[M-x package-refresh-contents RET]= :: refresh packages.
2. =[M-x package-list-packages]= + =[U]= + =[x]= :: upgrade all packages.

** el-get

** auto-install

* auto complete framework

** auto-complete

- =[M-TAB]= :: =ac-fuzzy-complete=.
- =[M-n/p]= :: navigate in popup menu.
- =[<return>]= :: select the candidate and append a space.
- =[M-<return>]= :: select the candidate.
- =[C-i]= :: complete common string.
- =[M-i]= / =[<tab>]= / =[TAB]= :: =(ac-expand)=, expand snippet, abbrev etc.
- =[C-h]= :: close/stop auto-complete popup menu.
- =[M-h]= :: show candiate tooltip help.
- =[C-?]= / =[F1]= :: ac-help.
- =[C-M-?]= / =[M-F1]= :: ac-persist-help.
- =[C-M-n/p]= / =[C-down/up]= :: ac-quick-help-scroll-[down/up].

** company-mode

** Helm

* snippet/template engine

** yasnippet

- =[TAB]= :: expand trigger
- =[TAB]= :: jump to next field
- =[S-TAB]= :: jump to previous field
- =[TAB]= :: expand trigger in field
- =[C-d]= :: delete field.

- =[C-c &]= :: prefix command for YASnippet.

- =[C-c & C-n]= :: create new snippet.
  + =[C-c C-c]= :: finish editing.
  + =[C-c C-k]= :: abort editing.

- =[C-c & C-s]= :: insert snippet.

- =[C-c & C-v]= :: visit/edit snippet.
  + =[C-c C-c]= :: finish editing.
  + =[C-c C-k]= :: abort editing.


*** In (yas-new-snippet) buffer

- =[C-c C-c]= :: =(yas-load-snippet-buffer-and-close)=
  - when input snippet name, you also can specify sub-folder. Like this in minibuffer:
    #+BEGIN_EXAMPLE
    snippet/dir/ruby-mode/? snippet name

    You can modify the snippet name, and append sub-folder name,
    if the sub-folder name does not exist, YASnippet will prompt whether create it.

    snippet/dir/ruby-mode/? sub-folder/snippet-name
    #+END_EXAMPLE

- =[C-c C-l]= :: =(yas-load-snippet-buffer)=
- =[C-c C-t]= :: =(yas-tryout-snippet)=

* Note, Wiki, Scratch (Org)

** Org-mode

- =[C-c o a]= :: org-agenda
- =[C-c o l]= :: org-store-link
- =[C-c o c]= :: org-capture

*** time & date

**** creating timestamps

- =[C-c .]= :: =org-time-stamp=.
- =[C-c !]= :: =org-time-stamp-inactive=.
- =[C-u C-c .]= :: like =[C-c .]=, but use alternative format which contains
                   date and time.
- =[C-u C-c !]= :: like =[C-c !]=, but use alternative format which contains
                   date and time.
- =[C-c C-c]= :: fix day name if missing or wrong.
- =[S-<left>/<right>/<up>/<down>]= :: adjust the date and time.
- =[C-c <]= :: =org-date-from-calendar=, insert a timestamp corresponding to
               the cursor date in the calendar.
- =[C-c >]= :: =org-gotto-calendar=, access the Emacs calendar for the current
               date. If there is a timestamp in the current line, go to the
               corresponding date instead.
- =[C-c C-o]= :: =org-open-at-point=, access the agenda for the date given by
                 the timestamp or -range at point.
- =[C-c C-y]= :: evaluate a time range.



**** org-clock

- =[C-c C-x C-i]= :: =org-clock-in=, start the clock on the current
     item. /(clock in)/
- =[C-c C-x C-o]= :: =org-clock-out=, stop the clock.
- =[C-c C-x C-e]= :: update the effort estimate for the current clock task.
- =[C-c C-t]= :: mark task as done to auto stop the clock.

#+BEGIN_SRC emacs-lisp
(define-key org-clock-mode-line-map [header-line mouse-2] 'org-clock-goto)
(define-key org-clock-mode-line-map [header-line mouse-1] 'org-clock-menu)
#+END_SRC

- =[C-c C-x C-j]= :: =org-clock-goto=, logging work, goto running clock.
- =[C-c C-x C-m]= :: =org-clock-menu=,

**** effort estimates

- =[C-c C-x e]= :: =org-set-effort=, set the effort estimate for the current
                   entry. =[e]= used for agenda buffer.
- =[C-c C-x C-e]= :: =org-clock-modify-effort-estimate=, modify the effort
     estimate of the item currently being clocked.

**** countdown timer

- =[C-c C-x ;]= :: =org-timer-set-timer=, use it everywhere else.
- =[;]= :: use =[;]= from org agenda buffer.

* PIM

** BBDB

- =[M-x bbdb]= :: start BBDB.

* Dictionary

- =point= / =region select= + =[C-c d d]= :: translate the word.
- =[C-c d C-d]= :: input.

* Notification

** Sauron

- =[C-c n]= :: toggle sauron window display.
* Email

- =[C-x #]= :: =(server-edit)=, use =emacsclient= as editor in Mutt
               setting. Then mutt will auto open email temp file with
               =emacsclient= and display in Emacs with server minor mode. After
               finish writing, you can close it with =[C-x #]=.

* IRC

** ERC

- =[C-x c]= :: global for ERC =chat=.

- =[TAB]= :: completion for: nick,
- =[M-TAB]= :: ispell complete word
- =[C-c C-j]= :: join channel
- =[C-c C-a]= :: away channel
- =[C-c C-x]= :: away all channels
- =[C-c C-p]= :: part from channel
- =[C-c C-q]= :: quit server
- =[C-c C-u]= :: kill input (undo)
- =[C-c C-c]= :: toggle interpret controls
- =[C-c C-d]= :: input action
- =[Enter]= :: on buttonized text to execute corresponding actions.
- =[C-c C-w C-b/C-f]= :: backward/forwards buttons.

* Programming

** Documentation

- =[C-h d]= :: help-document-map prefix.
  - =[C-h d d]= :: document reference help lookup with current point string as
                 default input query.
  - =[C-h d D]= :: document reference help lookup with manually input as query.

** Run & Test & Debug

- =[F5]= :: run, -> debug

** Navigate & Jump

*** TAGS

- =[M-.]= :: =(find-tag)=.

** Code Browser

*** ECB

*** speedbar

** Version Control System

*** Git

**** vc-git

- =[C-x v f]= :: =vc-git-grep=

**** magit

- =[C-c v s]= :: status
- =[q]= :: =magit-quit-session=

***** magit-status buffer Operations

- [X] help :: =[?]=
- [X] add to stage :: =[s, S, u, U]=
- [X] commit :: =[c]=
- [X] diff :: =[d]=
- [X] log
  - [X] file :: =[l]=
  - [X] repository :: =[L]=
  - [X] range :: =[l + rL]=
- [X] branch :: =[b]=
  - checkout
  - create
  - manage
- [X] pull :: =[F]=
- [X] push :: =[P]=


**** git-gutter-fringe

**** git-blame

**** git-commit-mode

**** git-rebase-mode

**** gitignore-mode

**** gitconfig-mode

**** git-messenger

- =[C-x v p]= :: =#'git-messenger:popup-message=

*** GitHub

**** yagist

- =(yagist-region-or-buffer)=
- =(yagist-region)=
- =(yagist-buffer)=
- =(yagist-region-private)=
- =(yagist-buffer-private)=
- =(yagist-list)=

- yagist-list-mode-map
  - =[g]= :: revert-buffer
  - =[p]= :: previous line
  - =[n]= :: forward line
  - =[q]= :: yagist-quit-window

**** github-browse-file

**** bug-reference-github

** Project

*** projectile

| C-c  p  | Prefix Command                                   |
|---------+--------------------------------------------------|
| C-c p A | projectile-ag                                    |
| C-c p D | projectile-dired                                 |
| C-c p R | projectile-regenerate-tags                       |
| C-c p T | projectile-find-test-file                        |
| C-c p a | projectile-ack                                   |
| C-c p b | projectile-switch-to-buffer                      |
| C-c p c | projectile-compile-project                       |
| C-c p d | projectile-find-dir                              |
| C-c p e | projectile-recentf                               |
| C-c p f | projectile-find-file                             |
| C-c p g | projectile-grep                                  |
| C-c p i | projectile-invalidate-cache                      |
| C-c p k | projectile-kill-buffers                          |
| C-c p l | projectile-find-file-in-directory                |
| C-c p o | projectile-multi-occur                           |
| C-c p p | projectile-test-project                          |
| C-c p r | projectile-replace                               |
| C-c p s | projectile-switch-project                        |
| C-c p t | projectile-toggle-between-implemenation-and-test |
| C-c p z | projectile-cache-current-file                    |

*** vagrant

- =[M-x vagrant-X]= :: This =X= is the action following command =vagrant=.

** Programming Languages

*** Ruby

**** ruby-mode

- =[RET]= :: =reindent-then-newline-and-indent= (defined by upstream /init-ruby-mode.el/).
- =[TAB]= :: =indent-for-tab-command= (upstream /init-ruby-mode.el/).

**** ruby-hash-syntax

**** Inferior ruby (inf-ruby)

**** Ruby compilation (ruby-compilation)

- =[C-x t]= :: =(ruby-compilation-this-buffer)=
- =[C-x T]= :: =(ruby-compilation-this-test)=
- =(ruby-compilation-run)= ::
- =[S-F7]= :: =ruby-compilation-this-buffer= (upstream /init-ruby-mode.el/).
- =[F7]= :: =ruby-compilation-this-test= (upstream /init-ruby-mode.el/).
- =[F6]= :: =recompile= (upstream /init-ruby-mode.el/).

**** Robe

**** ri

***** yari

- =[C-h d]= :: yari.

**** YAML

***** yaml-mode

**** ERB

***** mmm-mode

***** mmm-erb

***** derived

***** tagedit

***** sgml-mode

***** html-erb-mode


*** Lisp

**** Emacs Lisp

**** Common Lisp

***** lisp-mode

***** slime

- slime lisp implements
  - sbcl
  - lisp

  #+BEGIN_SRC emacs-lisp
  (eval-after-load "slime"
  (when (executable-find "sbcl")
    (add-to-list 'slime-lisp-implementations
                 '(sbcl ("sbcl") :coding-system utf-8-unix)))
  (when (executable-find "lisp")
    (add-to-list 'slime-lisp-implementations
                 '(cmucl ("lisp") :coding-system iso-latin-1-unix))))
  #+END_SRC

***** lispdoc

- =[C-c d]= :: lispdoc (my universal key binding)
- =[C-c l]= :: lispdoc (default upstream)

#+BEGIN_SRC emacs-lisp
(defun lispdoc ()
  "Searches lispdoc.com for SYMBOL, which is by default the symbol currently under the curser"
  (interactive)
  (let* ((word-at-point (word-at-point))
         (symbol-at-point (symbol-at-point))
         (default (symbol-name symbol-at-point))
         (inp (read-from-minibuffer
               (if (or word-at-point symbol-at-point)
                   (concat "Symbol (default " default "): ")
                 "Symbol (no default): "))))
    (if (and (string= inp "") (not word-at-point) (not
                                                   symbol-at-point))
        (message "you didn't enter a symbol!")
      (let ((search-type (read-from-minibuffer
                          "full-text (f) or basic (b) search (default b)? ")))
        (browse-url (concat "http://lispdoc.com?q="
                            (if (string= inp "")
                                default
                              inp)
                            "&search="
                            (if (string-equal search-type "f")
                                "full+text+search"
                              "basic+search")))))))

(define-key lisp-mode-map (kbd "C-c l") 'lispdoc)
#+END_SRC


*** C

*** Go

*** Web

**** HTML

**** CSS

**** JavaScript

*** R

*** Python



* Development

** Web

*** web-mode

**** Native Features

- smart indentation (according to the context : HTML, code, JavaScript or CSS)
- compatibility with many template engines : PHP, JSP, ASP / ASP.NET AJAX
  (Atlas), Django / Twig / Jinja(2) / ErlyDTL (Zotonic), ERB, FreeMarker,
  Velocity, Cheetah, Smarty, CTemplate / Mustache / Hapax / Handlebars / Meteor
  / ember.js, Blade (laravel), Knockoutjs, Go Template (Revel), Razor/Play,
  Dust, Closure (soy), underscore.js, template-toolkit, Liquid (jekyll),
  angular.js
- navigation =[C-c C-n]= between opening and closing HTML tags or between
  control blocks (e.g. =<?php if (): ?> … <?php endif; ?>=, =<c:if> … </c:if>=,
  ={% for %} … {% endfor %}=, ={{#SECTION}} … {{/SECTION}}=, etc.)
- code folding =[C-c C-f]= for HTML elements and control blocks
- HTML tag autoclosing (after =</=)
- syntax highlighting (according to the type of part/block)
- snippet insertion =[C-c C-s]= (auto indented, aware of text selection)
- auto-pairing (e.g. =<?p … hp ?>=, ={% … %}=)
- comment / uncomment =[C-;]= according to the type of block
- clever selection and expansion =[C-c C-m]=
- css colorization
- suspicious whitespaces detection =[C-c C-w]=
- clever understanding of comments and strings: a quote inside an html element
  doesn't "corrupt" the code, PHP heredoc strings compatibility, variable
  fontification in PHP double quoted strings, a part (javascript/css) can
  contain a string that embeds a block (e.g. php) that also contains strings,
  etc.
- html goodies nice handling of html attributes (no values, unquoted values,
  double/single quoted values), detection of void elements, compatibility with
  <script type="text/html"> and <script type="application/ld+json">, HTML
  entities substitution, tag mismatch detection
- filling =[M-q]= compatibility (for comments and HTML text)

**** Terminology

- In an HTML document, a part is interpreted by the navigator (e.g. a javacript
  part or a css part).
- A block is processed (client-side or server-side) before being rendered by the
  navigator (e.g. a PHP block, an Erb block, a dustjs block etc.).

As a result, a block can be located in a part that is embedded in an HTML
document.

**** Shortcuts

***** General

- =[C-c C-;]= comment / uncomment line(s)
- =[C-c C-d]= show tag mismatch
- =[C-c C-f]= toggle folding on a tag/block
- =[C-c C-i]= indent entire buffer
- =[C-c C-m]= mark and expand
- =[C-c C-n]= jump to opening/closing tag/block
- =[C-c C-r]= replace HTML entities
- =[C-c C-s]= insert snippet
- =[C-c C-w]= toggle display of invalid whitespaces

***** HTML element


- =[C-c /]=     element close
- =[C-c C-e b]= element beginning
- =[C-c C-e c]= element clone
- =[C-c C-e d]= child element (down)
- =[C-c C-e e]= element end
- =[C-c C-e i]= select element content (inner)
- =[C-c C-e k]= element kill
- =[C-c C-e n]= next element
- =[C-c C-e p]= previous element
- =[C-c C-e r]= rename element
- =[C-c C-e s]= select element
- =[C-c C-e t]= traverse dom tree
- =[C-c C-e u]= parent element (up)
- =[C-c C-e u]= element vanish

***** HTML tag


- =[C-c C-t b]= tag beginning
- =[C-c C-t e]= tag end
- =[C-c C-t m]= fetch matching tag
- =[C-c C-t s]= select tag
- =[C-c C-t p]= previous tag
- =[C-c C-t n]= next tag


***** Block


- =[C-c C-b c]= block close
- =[C-c C-b b]= block beginning
- =[C-c C-b e]= block end
- =[C-c C-b p]= previous block
- =[C-c C-b n]= next block
- =[C-c C-b k]= block kill
- =[C-c C-b s]= block select


**** helper functions

- =web-mode-apostrophes-replace= : replace ' by ’ (only in HTML content)
- =web-mode-entities-replace= : replace html entities (only in HTML content)
- =web-mode-quotes-replace= : replace dumb quotes (only in HTML content)



*** Ruby on Rails

**** rinari

**** haml-mode

**** customizations

***** update rails ctags

#+BEGIN_SRC emacs-lisp
(defun update-rails-ctags ()
  (interactive)
  (let ((default-directory (or (rinari-root) default-directory)))
    (shell-command (concat "ctags -a -e -f " rinari-tags-file-name " --tag-relative -R app lib vendor test"))))
#+END_SRC


* Linux

** crontab-mode
